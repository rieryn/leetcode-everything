22. Generate Parentheses

basically a tree of possible paranthesis, at each node we can branch into opening another(up to n) or close an open one 

 the runtime of backtracking algorithms is O(b^d), where b is the branching factor and d is the maximum depth of recursion.

Backtracking is characterized by a number of decisions b that can be made at each level of recursion. If you visualize the recursion tree, this is the number of children each internal node has. You can also think of b as standing for "base", which can help you remember that b is the base of the exponential.

If we can make b decisions at each level of recursion, and we expand the recursion tree to d levels (ie: each path has a length of d), then we get b^d nodes. Since backtracking is exhaustive and must visit each one of these nodes, the runtime is O(b^d).

complexity: there are catalan(n) valid expressions, length of expressions are 2n, so it's worst case close to 
catalan(n)*2n

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        #n parentheses > n pairs
        final = []
        #l
        def traverse(s, openp, closedp):
            #leaf, finished
            if len(s) == 2*n:
                final.append(s)
                return
            #if we have open parenthesis left to place
            #branch into opening another or closing this one
            if openp < n:
                traverse(s+'(', openp+1, closedp)
            if closedp < openp:
                traverse(s+')', openp, closedp+1)
        traverse('', 0, 0)
        return final